== Задача: Сервис обрезки URL с использованием Golang и Docker ==
 
=== Обзор ===
Необходимо создать простой сервис сокращения URL на Golang. Сервис должен предоставлять API для создания коротких URL и получения исходных URL. Кроме того, необходимо контейнеризировать приложение с использованием Docker и использовать MariaDB в качестве базы данных для хранения сопоставлений URL.
 
=== Требования ===
* '''API эндпоинты:'''
** <code>POST /shorten</code>: Принимает JSON-пayload с длинным URL и возвращает сокращенный URL.
** <code>GET /{shortURL}</code>: Перенаправляет на исходный длинный URL.
 
* '''Хранилище:'''
** Использовать MariaDB для хранения сопоставлений URL.
 
* '''Docker:'''
** Контейнеризировать приложение с использованием Docker.
** Предоставить <code>Dockerfile</code> для сборки образа.
** Использовать <code>docker-compose</code> для запуска приложения.
 
* '''Документация:'''
** Предоставить файл README с инструкциями по сборке и запуску приложения с использованием Docker.
** Включить документацию по API с примерами использования эндпоинтов.
 
== Подробные инструкции ==
* '''Проектирование API:'''
** <code>POST /shorten</code>
*** Тело запроса: <code>{"url": "https://example.com"}</code>
*** Ответ: <code>{"short_url": "http://localhost:8080/abc123"}</code>
** <code>GET /{shortURL}</code>
*** Перенаправление на исходный URL, сохраненный для данного короткого URL.
 
* '''Реализация на Golang:'''
** Создать новый проект на Golang.
** Реализовать API эндпоинты с использованием фреймворка, такого как <code>net/http</code>.
** Использовать MariaDB для хранения сопоставлений URL.
** Обеспечить правильную обработку ошибок и валидацию входных данных.
 
* '''Интеграция с Docker:'''
** Создать <code>Dockerfile</code> для контейнеризации приложения на Golang.
** Обеспечить прослушивание порта <code>8080</code>.
** Написать файл <code>docker-compose.yml</code> для определения сервиса.
** Обеспечить возможность запуска сервиса с использованием <code>docker-compose up</code>.
 
* '''Тестирование:'''
** Написать тесты для логики сокращения и получения URL.
** Обеспечить выполнение тестов в рамках процесса сборки Docker.
 
* '''Документация:'''
** Написать файл <code>README.md</code> с:
*** Описанием проекта
*** Инструкциями по сборке и запуску приложения с использованием Docker
*** Документацией по API с примерами
** Обеспечить комментарии и документацию в коде для объяснения реализации.
 
=== Ожидаемые результаты ===
* Исходный код на Golang для сервиса сокращения URL.
* <code>Dockerfile</code> и <code>docker-compose.yml</code> для контейнеризации приложения.
* Модульные тесты для логики сокращения и получения URL.
* Полный файл <code>README.md</code> с инструкциями и документацией по API.